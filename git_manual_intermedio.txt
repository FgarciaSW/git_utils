

***
#1 HOW TO ACHIVE THE PERFECT COMMIT

#1 Add the right changes!
#2 Compose a good commit message!

#RULE: ONE COMMIT PEER TOPIC

# Files: A, B, C  con varias funciones mezcladas -> HACER UN COMMIT DE TODO ES UN ERROR
# FIles: A, B con cambios sobre el mismo topic -> HACER UN COMMIT ES UN ACIERTO

#################################################################
#Escenario 1
# Objetivo: Subir cambios granulares de un fichero, a la fase de staged.


#Se ha realizado cambios en el archivo A sobre el TOPIC 1, y cambios
# en el archivo B sobre el TOPIC 1 y el TOPIC 2.
# ¿Hay alguna forma de añadir en el archivo B exclusivamente los cambios del TOPIC 1 a la fase de stage? Porque los cambios del TOPIC 2 no deberían incluirse en el COMMIT futuro.

# La opción -p permite paginar

git add -p <file>

####################################################################
#Escenario 2
#Objetivo: ¿Que debe tener un good commit message?

# SUBJECT
 Concise summary of what happened
#BODY
 What is now different than before?
 Whats the reason for the change?
Is there anything to watch out for /anything particularly remarkable?

***
# 2 BRANCHING STRATEGIES


Deben existir convenciones en un equipo de programación.

¿Que branches hay?
¿Como utilizarlas?
¿Cuando se crean nuevas?


Distinguir 
a. Long-Running branches
b. Short Running branches

#a. Long Running branches

Existen durante todo el periodo de vida del proyecto.

Often they mirror "stages" in your dev life cycle.

Common convention:no direct commits.

#b.Short lived Branches

Se crean para nuevas características, experimentos, 

Will be deleted after integration (merge/rebase)


# Two examples of branch strature

# Github flow

1 long running branch: main
+1 short running branch: features, bugs, etc
# Git flow

2 long running branch: main + develop
+1 short running branch over develop

*main will be production enviroment
*develop will be develop enviroment


#Pull request

# Es una forma de contribuir en repositorios de terceros.
# You can fork the original repository, make changes in your forked version and
# open a pull request to include those changes into the original repository.
# And one of the main contributors can then review your changes and decide to include them or not.


No es una característica esencial de git, sino que es provista por "hosting platform": Github ,
 GitLab, etc. Por tanto, puede variar un poco dependiendo de la plataforma.

Pull request es una solicitud a un repositorio online de un tercero, para solicitarle que
acepte los cambios que realizaste para mejorar su código.

En el archivo ./comandos_git.txt explico los pasos que hay que seguir antes, durante y después de hacer un pull.

#Hacer un ejemplo práctico.

-Se ha conectado el repositorio local de git, con el repositorio remoto en Github [DONE]

#WORKING WITH BRANCHES

++Cuando trabajes en una rama secundaria, debes enviar los cambios a la fase de commit en la rama de 
trabajo antes de cambiar de rama.

++Si cambias de rama antes de commitear tus modificaciones en la rama de trabajo, sobreescribiras el archivo
en el directorio local. Ten cuidado.

¡IMPORTANTE!+Mala praxis consiste en escribir sobre la misma linea en dos ramas diferentes. Pero si escribes en lineas diferentes del 
mismo documento, cada linea la has añadido en una branch diferente, al realizar el merge, se une todo al documento.

+Una vez que una rama se ha "merge" con la rama principal, no tiene sentido seguir trabajando en esta rama. Se debería eliminar.


ejemplo:
-------------- +
documento      +

 codigo base   +

 funcion extra +
---------------+

-creo una rama secundaria: rama_desarrollo

---------------
documento      +
               +
  codigo base  +
               +
               +
 funcion extra +
 x=x+a         +   
----------------


-he modificado el documento añadiendo la linea x=x+a
-envio los cambios a la etapa de staged y etapa de commmit de mi rama_desarrollo
-cambio desde la rama_desarrollo a la rama master

--------------
documento       +
                + 
 codigo base    +
 main (int a){} +
                +
 funcion extra  +
---------------

-Hay que resaltar que los cambios en la rama_desarrollo no se reflejan en la rama master AÚN.
-Edito mi documento, añadiendo código al sector de codigo base.

- Desde la rama master, mezclo las ramas con el comando git merge rama_desarrollo

- El resultado final es:
Al documento de la rama master, se han añadido la linea que se agrego en la rama_desarrollo

--------------       
documento       +
                +
 codigo base    +
 main (int a){} +
                +
 funcion extra  +
 x=x+a
----------------


Creo el doc      Creo la rama desaroolo                        git merge 
                                        Edito codigo base
----X--------------O---------------------------X----------------O--------          MASTER
                   -                                            -
                   -                                            -
                    --------------X------------------------------                  RAMA_DESARROLLO

                      Edito funcion extra
          

#MERGE CONFLICT

Escenario: Hay 2 ramas de trabajo:

- rama master
- rama de desarrollo

#Desde ambas ramas, se modifica la misma linea en el mismo fichero.

#Cuando se va a 'merge' de la rama desarrollo en la rama master -> CONFLICTO 

#Ejemplo de traza, despues de ejecutar el comando "git merge desarrollo"

Auto-fusionando clasejava.txt
CONFLICTO (contenido): Conflicto de fusión en clasejava.txt
Fusión automática falló; arregle los conflictos y luego realice un commit con el resultado.

#Al abrir el fichero que se ha modificado desde ambos branches, aparecen los dos cambios, en
#el fichero, para que sea facil observar las diferencias

Ejemplo del fichero:

-----------------------------------------------------
aplicacion bases                                    +
                                                    +
main()                                              +
x=elige tu edad                                     +
funcion extra1(x)				    +
fin;						    +
						    +
						    +
funcion extra1 ()
{

if(x>18)
 eres mayor de edad

if(x>18)
 eres menor de edad. No puedes tomar alcohol.

print
#<<<<<<< HEAD
#(Ha terminado); Se agrega linea desde rama master;
#=======
#Se agrega linea desde la rama de desarrollo.
#>>>>>>> desarrollo
}

------------------------------------------------------

Desde HEAD hasta ======; son los cambios efectuados en la rama master

Desde ===== hasta desarrollo; son los cambios efectuados en la rama desarrollo.







